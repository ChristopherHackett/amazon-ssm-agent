// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package ssmmds provides a client for Amazon Simple Systems Management Message Delivery Service.
package ssmmds

import (
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/protocol/jsonrpc"
)

const opAcknowledgeMessage = "AcknowledgeMessage"

// AcknowledgeMessageRequest generates a request for the AcknowledgeMessage operation.
func (c *SSMMDS) AcknowledgeMessageRequest(input *AcknowledgeMessageInput) (req *request.Request, output *AcknowledgeMessageOutput) {
	op := &request.Operation{
		Name:       opAcknowledgeMessage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AcknowledgeMessageInput{}
	}

	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	output = &AcknowledgeMessageOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) AcknowledgeMessage(input *AcknowledgeMessageInput) (*AcknowledgeMessageOutput, error) {
	req, out := c.AcknowledgeMessageRequest(input)
	err := req.Send()
	return out, err
}

const opDeleteMessage = "DeleteMessage"

// DeleteMessageRequest generates a request for the DeleteMessage operation.
func (c *SSMMDS) DeleteMessageRequest(input *DeleteMessageInput) (req *request.Request, output *DeleteMessageOutput) {
	op := &request.Operation{
		Name:       opDeleteMessage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteMessageInput{}
	}

	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	output = &DeleteMessageOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) DeleteMessage(input *DeleteMessageInput) (*DeleteMessageOutput, error) {
	req, out := c.DeleteMessageRequest(input)
	err := req.Send()
	return out, err
}

const opFailMessage = "FailMessage"

// FailMessageRequest generates a request for the FailMessage operation.
func (c *SSMMDS) FailMessageRequest(input *FailMessageInput) (req *request.Request, output *FailMessageOutput) {
	op := &request.Operation{
		Name:       opFailMessage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &FailMessageInput{}
	}

	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(jsonrpc.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	output = &FailMessageOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) FailMessage(input *FailMessageInput) (*FailMessageOutput, error) {
	req, out := c.FailMessageRequest(input)
	err := req.Send()
	return out, err
}

const opGetEndpoint = "GetEndpoint"

// GetEndpointRequest generates a request for the GetEndpoint operation.
func (c *SSMMDS) GetEndpointRequest(input *GetEndpointInput) (req *request.Request, output *GetEndpointOutput) {
	op := &request.Operation{
		Name:       opGetEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetEndpointInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetEndpointOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) GetEndpoint(input *GetEndpointInput) (*GetEndpointOutput, error) {
	req, out := c.GetEndpointRequest(input)
	err := req.Send()
	return out, err
}

const opGetMessages = "GetMessages"

// GetMessagesRequest generates a request for the GetMessages operation.
func (c *SSMMDS) GetMessagesRequest(input *GetMessagesInput) (req *request.Request, output *GetMessagesOutput) {
	op := &request.Operation{
		Name:       opGetMessages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetMessagesInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetMessagesOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) GetMessages(input *GetMessagesInput) (*GetMessagesOutput, error) {
	req, out := c.GetMessagesRequest(input)
	err := req.Send()
	return out, err
}

const opSendReply = "SendReply"

// SendReplyRequest generates a request for the SendReply operation.
func (c *SSMMDS) SendReplyRequest(input *SendReplyInput) (req *request.Request, output *SendReplyOutput) {
	op := &request.Operation{
		Name:       opSendReply,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SendReplyInput{}
	}

	req = c.newRequest(op, input, output)
	output = &SendReplyOutput{}
	req.Data = output
	return
}

func (c *SSMMDS) SendReply(input *SendReplyInput) (*SendReplyOutput, error) {
	req, out := c.SendReplyRequest(input)
	err := req.Send()
	return out, err
}

type AcknowledgeMessageInput struct {
	_ struct{} `type:"structure"`

	MessageId *string `min:"16" type:"string" required:"true"`
}

// String returns the string representation
func (s AcknowledgeMessageInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AcknowledgeMessageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AcknowledgeMessageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AcknowledgeMessageInput"}
	if s.MessageId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessageId"))
	}
	if s.MessageId != nil && len(*s.MessageId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("MessageId", 16))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type AcknowledgeMessageOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s AcknowledgeMessageOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AcknowledgeMessageOutput) GoString() string {
	return s.String()
}

type DeleteMessageInput struct {
	_ struct{} `type:"structure"`

	MessageId *string `min:"16" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteMessageInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteMessageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteMessageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteMessageInput"}
	if s.MessageId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessageId"))
	}
	if s.MessageId != nil && len(*s.MessageId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("MessageId", 16))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeleteMessageOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteMessageOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteMessageOutput) GoString() string {
	return s.String()
}

type DeliveryOptions struct {
	_ struct{} `type:"structure"`

	ExpiresAfter *string `type:"string"`

	ReplacementKey *string `type:"string"`

	SchedulePush *string `type:"string" enum:"SchedulePush"`
}

// String returns the string representation
func (s DeliveryOptions) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeliveryOptions) GoString() string {
	return s.String()
}

type FailMessageInput struct {
	_ struct{} `type:"structure"`

	FailureType *string `type:"string" required:"true" enum:"FailureType"`

	MessageId *string `min:"16" type:"string" required:"true"`
}

// String returns the string representation
func (s FailMessageInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FailMessageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FailMessageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FailMessageInput"}
	if s.FailureType == nil {
		invalidParams.Add(request.NewErrParamRequired("FailureType"))
	}
	if s.MessageId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessageId"))
	}
	if s.MessageId != nil && len(*s.MessageId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("MessageId", 16))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type FailMessageOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s FailMessageOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s FailMessageOutput) GoString() string {
	return s.String()
}

type GetEndpointInput struct {
	_ struct{} `type:"structure"`

	Destination *string `min:"10" type:"string" required:"true"`
}

// String returns the string representation
func (s GetEndpointInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetEndpointInput"}
	if s.Destination == nil {
		invalidParams.Add(request.NewErrParamRequired("Destination"))
	}
	if s.Destination != nil && len(*s.Destination) < 10 {
		invalidParams.Add(request.NewErrParamMinLen("Destination", 10))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetEndpointOutput struct {
	_ struct{} `type:"structure"`

	Endpoint *string `type:"string"`
}

// String returns the string representation
func (s GetEndpointOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetEndpointOutput) GoString() string {
	return s.String()
}

type GetMessagesInput struct {
	_ struct{} `type:"structure"`

	Destination *string `min:"10" type:"string" required:"true"`

	MessagesRequestId *string `min:"16" type:"string" required:"true"`

	NextToken *string `type:"string"`

	VisibilityTimeoutInSeconds *int64 `type:"integer"`
}

// String returns the string representation
func (s GetMessagesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMessagesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetMessagesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetMessagesInput"}
	if s.Destination == nil {
		invalidParams.Add(request.NewErrParamRequired("Destination"))
	}
	if s.Destination != nil && len(*s.Destination) < 10 {
		invalidParams.Add(request.NewErrParamMinLen("Destination", 10))
	}
	if s.MessagesRequestId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessagesRequestId"))
	}
	if s.MessagesRequestId != nil && len(*s.MessagesRequestId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("MessagesRequestId", 16))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetMessagesOutput struct {
	_ struct{} `type:"structure"`

	Destination *string `min:"10" type:"string"`

	Messages []*Message `type:"list"`

	MessagesRequestId *string `min:"16" type:"string"`
}

// String returns the string representation
func (s GetMessagesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMessagesOutput) GoString() string {
	return s.String()
}

type Message struct {
	_ struct{} `type:"structure"`

	CreatedDate *string `min:"24" type:"string"`

	Destination *string `min:"10" type:"string"`

	MessageId *string `min:"16" type:"string"`

	NextToken *string `type:"string"`

	Payload *string `type:"string"`

	PayloadDigest *string `type:"string"`

	Topic *string `min:"1" type:"string"`
}

// String returns the string representation
func (s Message) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Message) GoString() string {
	return s.String()
}

type SendReplyInput struct {
	_ struct{} `type:"structure"`

	DeliveryOptions *DeliveryOptions `type:"structure"`

	MessageId *string `min:"16" type:"string" required:"true"`

	Payload *string `type:"string" required:"true"`

	ReplyId *string `min:"16" type:"string" required:"true"`
}

// String returns the string representation
func (s SendReplyInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SendReplyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SendReplyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SendReplyInput"}
	if s.MessageId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessageId"))
	}
	if s.MessageId != nil && len(*s.MessageId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("MessageId", 16))
	}
	if s.Payload == nil {
		invalidParams.Add(request.NewErrParamRequired("Payload"))
	}
	if s.ReplyId == nil {
		invalidParams.Add(request.NewErrParamRequired("ReplyId"))
	}
	if s.ReplyId != nil && len(*s.ReplyId) < 16 {
		invalidParams.Add(request.NewErrParamMinLen("ReplyId", 16))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type SendReplyOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	MessageId *string `min:"16" type:"string"`

	ReplyId *string `min:"16" type:"string"`

	ReplyStatus *string `type:"string" enum:"ReplyStatus"`
}

// String returns the string representation
func (s SendReplyOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SendReplyOutput) GoString() string {
	return s.String()
}

const (
	// @enum FailureType
	FailureTypeNoHandlerExists = "NoHandlerExists"
	// @enum FailureType
	FailureTypeInternalHandlerException = "InternalHandlerException"
)

const (
	// @enum ReplyStatus
	ReplyStatusCreated = "Created"
	// @enum ReplyStatus
	ReplyStatusQueued = "Queued"
	// @enum ReplyStatus
	ReplyStatusAcknowledged = "Acknowledged"
	// @enum ReplyStatus
	ReplyStatusNoActionTaken = "NoActionTaken"
)

const (
	// @enum SchedulePush
	SchedulePushEventually = "EVENTUALLY"
	// @enum SchedulePush
	SchedulePushAsap = "ASAP"
)
