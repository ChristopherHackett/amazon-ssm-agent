// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package birdwatcherstationservice provides a client for BirdwatcherStationService.
package birdwatcherstationservice

import (
	"fmt"

	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opGetManifest = "GetManifest"

// GetManifestRequest generates a request for the GetManifest operation.
func (c *BirdwatcherStationService) GetManifestRequest(input *GetManifestInput) (req *request.Request, output *GetManifestOutput) {
	op := &request.Operation{
		Name:       opGetManifest,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetManifestInput{}
	}

	req = c.newRequest(op, input, output)
	output = &GetManifestOutput{}
	req.Data = output
	return
}

func (c *BirdwatcherStationService) GetManifest(input *GetManifestInput) (*GetManifestOutput, error) {
	req, out := c.GetManifestRequest(input)
	err := req.Send()
	return out, err
}

const opPutConfigurePackageResult = "PutConfigurePackageResult"

// PutConfigurePackageResultRequest generates a request for the PutConfigurePackageResult operation.
func (c *BirdwatcherStationService) PutConfigurePackageResultRequest(input *PutConfigurePackageResultInput) (req *request.Request, output *PutConfigurePackageResultOutput) {
	op := &request.Operation{
		Name:       opPutConfigurePackageResult,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PutConfigurePackageResultInput{}
	}

	req = c.newRequest(op, input, output)
	output = &PutConfigurePackageResultOutput{}
	req.Data = output
	return
}

func (c *BirdwatcherStationService) PutConfigurePackageResult(input *PutConfigurePackageResultInput) (*PutConfigurePackageResultOutput, error) {
	req, out := c.PutConfigurePackageResultRequest(input)
	err := req.Send()
	return out, err
}

type Auth struct {
	_ struct{} `type:"structure"`

	UserArn *string `type:"string" required:"true"`
}

// String returns the string representation
func (s Auth) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Auth) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Auth) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "Auth"}
	if s.UserArn == nil {
		invalidParams.Add(request.NewErrParamRequired("UserArn"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetManifestInput struct {
	_ struct{} `type:"structure"`

	Auth *Auth `type:"structure" required:"true"`

	PackageName *string `min:"1" type:"string" required:"true"`

	PackageVersion *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s GetManifestInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetManifestInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetManifestInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetManifestInput"}
	if s.Auth == nil {
		invalidParams.Add(request.NewErrParamRequired("Auth"))
	}
	if s.PackageName == nil {
		invalidParams.Add(request.NewErrParamRequired("PackageName"))
	}
	if s.PackageName != nil && len(*s.PackageName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageName", 1))
	}
	if s.PackageVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("PackageVersion"))
	}
	if s.PackageVersion != nil && len(*s.PackageVersion) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageVersion", 1))
	}
	if s.Auth != nil {
		if err := s.Auth.Validate(); err != nil {
			invalidParams.AddNested("Auth", err.(request.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type GetManifestOutput struct {
	_ struct{} `type:"structure"`

	Manifest *string `type:"string"`
}

// String returns the string representation
func (s GetManifestOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetManifestOutput) GoString() string {
	return s.String()
}

type PackageResultStep struct {
	_ struct{} `type:"structure"`

	Action *string `min:"1" type:"string"`

	Result *int64 `type:"integer"`

	Timing *int64 `type:"integer"`
}

// String returns the string representation
func (s PackageResultStep) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PackageResultStep) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PackageResultStep) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PackageResultStep"}
	if s.Action != nil && len(*s.Action) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Action", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type PutConfigurePackageResultInput struct {
	_ struct{} `type:"structure"`

	Auth *Auth `type:"structure" required:"true"`

	OverallTiming *int64 `type:"integer" required:"true"`

	PackageName *string `min:"1" type:"string" required:"true"`

	PackageResultAttributes map[string]*string `min:"1" type:"map"`

	PackageResultSteps []*PackageResultStep `min:"1" type:"list"`

	PackageVersion *string `min:"1" type:"string" required:"true"`

	Result *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s PutConfigurePackageResultInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutConfigurePackageResultInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutConfigurePackageResultInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PutConfigurePackageResultInput"}
	if s.Auth == nil {
		invalidParams.Add(request.NewErrParamRequired("Auth"))
	}
	if s.OverallTiming == nil {
		invalidParams.Add(request.NewErrParamRequired("OverallTiming"))
	}
	if s.PackageName == nil {
		invalidParams.Add(request.NewErrParamRequired("PackageName"))
	}
	if s.PackageName != nil && len(*s.PackageName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageName", 1))
	}
	if s.PackageResultAttributes != nil && len(s.PackageResultAttributes) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageResultAttributes", 1))
	}
	if s.PackageResultSteps != nil && len(s.PackageResultSteps) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageResultSteps", 1))
	}
	if s.PackageVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("PackageVersion"))
	}
	if s.PackageVersion != nil && len(*s.PackageVersion) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("PackageVersion", 1))
	}
	if s.Result == nil {
		invalidParams.Add(request.NewErrParamRequired("Result"))
	}
	if s.Auth != nil {
		if err := s.Auth.Validate(); err != nil {
			invalidParams.AddNested("Auth", err.(request.ErrInvalidParams))
		}
	}
	if s.PackageResultSteps != nil {
		for i, v := range s.PackageResultSteps {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PackageResultSteps", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type PutConfigurePackageResultOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s PutConfigurePackageResultOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutConfigurePackageResultOutput) GoString() string {
	return s.String()
}
